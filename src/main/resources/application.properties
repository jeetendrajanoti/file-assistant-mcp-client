spring.application.name=mcpclient
server.port=8383

# Configure MCP
## Spring Security
# Security: for getting tokens used when listing tools, initializing, etc.
# Authserver common config
spring.security.oauth2.client.provider.authserver.issuer-uri=http://localhost:9090/realms/home

# Security: for getting tokens used when listing tools, initializing, etc.
spring.security.oauth2.client.registration.authserver-client-credentials.client-id=mcpclient
spring.security.oauth2.client.registration.authserver-client-credentials.client-secret=YRaUekPqNsSsGZu8F2DSX3IAGHo0iDPP
spring.security.oauth2.client.registration.authserver-client-credentials.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.authserver-client-credentials.provider=authserver

## MCP Client
spring.ai.mcp.client.enabled=true
spring.ai.mcp.client.name=file-search-mcp-client
spring.ai.mcp.client.version=1.0.0
spring.ai.mcp.client.request-timeout=30s
spring.ai.mcp.client.type=SYNC
spring.ai.mcp.client.sse.connections.server.url=http://localhost:8080

## Ollama AI
ollama.host=http://localhost:11434
ollama.chat.model=qwen3:14b
ollama.photo.chat.model=qwen2.5vl
# spring.ai.ollama.chat.options.num-ctx=32678
spring.ai.ollama.chat.options.num-ctx=8192

ollama.chat.options.temperature=0.9

## OpenAI API (Groq)
spring.ai.openai.base-url=https://api.groq.com/openai
spring.ai.openai.api-key=${OPENAI_API_KEY}
spring.ai.openai.chat.options.model=qwen/qwen3-32b
spring.ai.openai.chat.options.temperature=0.9
spring.ai.openai.chat.options.maxCompletionTokens=32768
spring.ai.openai.chat.options.toolChoice=auto

file.assistant.system.prompt=classpath:file_assistant_system_prompt_with_tool.txt
result.format.system.prompt=classpath:result_format_system_prompt.txt
vector.query.template=classpath:vector_query_template.txt

